// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from idl.djinni

#include "NJSAlgorandTransactionCpp.hpp"
#include "NJSObjectWrapper.hpp"
#include "NJSHexUtils.hpp"

using namespace v8;
using namespace node;
using namespace std;

NAN_METHOD(NJSAlgorandTransaction::getId) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSAlgorandTransaction::getId needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::AlgorandTransaction>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSAlgorandTransaction::getId : implementation of AlgorandTransaction is not valid");
    }

    auto result = cpp_impl->getId();

    //Wrap result in node object
    auto arg_0 = Nan::New<String>(result).ToLocalChecked();

    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSAlgorandTransaction::getType) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSAlgorandTransaction::getType needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::AlgorandTransaction>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSAlgorandTransaction::getType : implementation of AlgorandTransaction is not valid");
    }

    auto result = cpp_impl->getType();

    //Wrap result in node object
    auto arg_0 = Nan::New<String>(result).ToLocalChecked();

    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSAlgorandTransaction::getSender) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSAlgorandTransaction::getSender needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::AlgorandTransaction>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSAlgorandTransaction::getSender : implementation of AlgorandTransaction is not valid");
    }

    auto result = cpp_impl->getSender();

    //Wrap result in node object
    auto arg_0 = Nan::New<String>(result).ToLocalChecked();

    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSAlgorandTransaction::getFee) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSAlgorandTransaction::getFee needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::AlgorandTransaction>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSAlgorandTransaction::getFee : implementation of AlgorandTransaction is not valid");
    }

    auto result = cpp_impl->getFee();

    //Wrap result in node object
    auto arg_0 = Nan::New<String>(result).ToLocalChecked();

    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSAlgorandTransaction::getNote) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSAlgorandTransaction::getNote needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::AlgorandTransaction>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSAlgorandTransaction::getNote : implementation of AlgorandTransaction is not valid");
    }

    auto result = cpp_impl->getNote();

    //Wrap result in node object
    auto arg_0 = Nan::New<String>(result).ToLocalChecked();

    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSAlgorandTransaction::getRound) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSAlgorandTransaction::getRound needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::AlgorandTransaction>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSAlgorandTransaction::getRound : implementation of AlgorandTransaction is not valid");
    }

    auto result = cpp_impl->getRound();

    //Wrap result in node object
    auto arg_0 = Nan::New<String>(result).ToLocalChecked();

    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSAlgorandTransaction::getSenderRewards) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSAlgorandTransaction::getSenderRewards needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::AlgorandTransaction>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSAlgorandTransaction::getSenderRewards : implementation of AlgorandTransaction is not valid");
    }

    auto result = cpp_impl->getSenderRewards();

    //Wrap result in node object
    auto arg_0 = Nan::New<String>(result).ToLocalChecked();

    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSAlgorandTransaction::getReceiverRewards) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSAlgorandTransaction::getReceiverRewards needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::AlgorandTransaction>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSAlgorandTransaction::getReceiverRewards : implementation of AlgorandTransaction is not valid");
    }

    auto result = cpp_impl->getReceiverRewards();

    //Wrap result in node object
    auto arg_0 = Nan::New<String>(result).ToLocalChecked();

    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSAlgorandTransaction::getCloseRewards) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSAlgorandTransaction::getCloseRewards needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::AlgorandTransaction>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSAlgorandTransaction::getCloseRewards : implementation of AlgorandTransaction is not valid");
    }

    auto result = cpp_impl->getCloseRewards();

    //Wrap result in node object
    auto arg_0 = Nan::New<String>(result).ToLocalChecked();

    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSAlgorandTransaction::getCorrelationId) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSAlgorandTransaction::getCorrelationId needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::AlgorandTransaction>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSAlgorandTransaction::getCorrelationId : implementation of AlgorandTransaction is not valid");
    }

    auto result = cpp_impl->getCorrelationId();

    //Wrap result in node object
    auto arg_0 = Nan::New<String>(result).ToLocalChecked();

    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSAlgorandTransaction::setCorrelationId) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSAlgorandTransaction::setCorrelationId needs 1 arguments");
    }

    //Check if parameters have correct types
    Nan::Utf8String string_arg_0(info[0]->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0 = std::string(*string_arg_0);

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::AlgorandTransaction>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSAlgorandTransaction::setCorrelationId : implementation of AlgorandTransaction is not valid");
    }

    auto result = cpp_impl->setCorrelationId(arg_0);

    //Wrap result in node object
    auto arg_1 = Nan::New<String>(result).ToLocalChecked();

    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSAlgorandTransaction::setSender) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSAlgorandTransaction::setSender needs 1 arguments");
    }

    //Check if parameters have correct types
    Nan::Utf8String string_arg_0(info[0]->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0 = std::string(*string_arg_0);

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::AlgorandTransaction>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSAlgorandTransaction::setSender : implementation of AlgorandTransaction is not valid");
    }
    cpp_impl->setSender(arg_0);
}
NAN_METHOD(NJSAlgorandTransaction::setFee) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSAlgorandTransaction::setFee needs 1 arguments");
    }

    //Check if parameters have correct types
    Nan::Utf8String string_arg_0(info[0]->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0 = std::string(*string_arg_0);

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::AlgorandTransaction>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSAlgorandTransaction::setFee : implementation of AlgorandTransaction is not valid");
    }
    cpp_impl->setFee(arg_0);
}
NAN_METHOD(NJSAlgorandTransaction::setNote) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSAlgorandTransaction::setNote needs 1 arguments");
    }

    //Check if parameters have correct types
    Nan::Utf8String string_arg_0(info[0]->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0 = std::string(*string_arg_0);

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::AlgorandTransaction>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSAlgorandTransaction::setNote : implementation of AlgorandTransaction is not valid");
    }
    cpp_impl->setNote(arg_0);
}
NAN_METHOD(NJSAlgorandTransaction::setPaymentInfo) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSAlgorandTransaction::setPaymentInfo needs 1 arguments");
    }

    //Check if parameters have correct types

    auto field_arg_0_1 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("recipientAddress").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_1(field_arg_0_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_1 = std::string(*string_arg_0_1);

    auto field_arg_0_2 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("amount").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_2(field_arg_0_2->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_2 = std::string(*string_arg_0_2);

    auto field_arg_0_3 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("closeAddress").ToLocalChecked()).ToLocalChecked();
    auto arg_0_3 = std::experimental::optional<std::string>();
    if(!field_arg_0_3->IsNull() && !field_arg_0_3->IsUndefined())
    {
        Nan::Utf8String string_opt_arg_0_3(field_arg_0_3->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_0_3 = std::string(*string_opt_arg_0_3);
        arg_0_3.emplace(opt_arg_0_3);
    }


    auto field_arg_0_4 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("closeAmount").ToLocalChecked()).ToLocalChecked();
    auto arg_0_4 = std::experimental::optional<std::string>();
    if(!field_arg_0_4->IsNull() && !field_arg_0_4->IsUndefined())
    {
        Nan::Utf8String string_opt_arg_0_4(field_arg_0_4->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_0_4 = std::string(*string_opt_arg_0_4);
        arg_0_4.emplace(opt_arg_0_4);
    }

    AlgorandPaymentInfo arg_0(arg_0_1, arg_0_2, arg_0_3, arg_0_4);


    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::AlgorandTransaction>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSAlgorandTransaction::setPaymentInfo : implementation of AlgorandTransaction is not valid");
    }
    cpp_impl->setPaymentInfo(arg_0);
}
NAN_METHOD(NJSAlgorandTransaction::getPaymentInfo) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSAlgorandTransaction::getPaymentInfo needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::AlgorandTransaction>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSAlgorandTransaction::getPaymentInfo : implementation of AlgorandTransaction is not valid");
    }

    auto result = cpp_impl->getPaymentInfo();

    //Wrap result in node object
    auto arg_0 = Nan::New<Object>();
    auto arg_0_1 = Nan::New<String>(result.recipientAddress).ToLocalChecked();
    Nan::DefineOwnProperty(arg_0, Nan::New<String>("recipientAddress").ToLocalChecked(), arg_0_1);
    auto arg_0_2 = Nan::New<String>(result.amount).ToLocalChecked();
    Nan::DefineOwnProperty(arg_0, Nan::New<String>("amount").ToLocalChecked(), arg_0_2);
    Local<Value> arg_0_3;
    if(result.closeAddress)
    {
        auto arg_0_3_optional = (result.closeAddress).value();
        auto arg_0_3_tmp = Nan::New<String>(arg_0_3_optional).ToLocalChecked();
        arg_0_3 = arg_0_3_tmp;
    }

    Nan::DefineOwnProperty(arg_0, Nan::New<String>("closeAddress").ToLocalChecked(), arg_0_3);
    Local<Value> arg_0_4;
    if(result.closeAmount)
    {
        auto arg_0_4_optional = (result.closeAmount).value();
        auto arg_0_4_tmp = Nan::New<String>(arg_0_4_optional).ToLocalChecked();
        arg_0_4 = arg_0_4_tmp;
    }

    Nan::DefineOwnProperty(arg_0, Nan::New<String>("closeAmount").ToLocalChecked(), arg_0_4);


    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSAlgorandTransaction::setParticipationInfo) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSAlgorandTransaction::setParticipationInfo needs 1 arguments");
    }

    //Check if parameters have correct types

    auto field_arg_0_1 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("rootPublicKey").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_1(field_arg_0_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_1 = std::string(*string_arg_0_1);

    auto field_arg_0_2 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("vrfPublicKey").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_2(field_arg_0_2->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_2 = std::string(*string_arg_0_2);

    auto field_arg_0_3 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("voteKeyDilution").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_3(field_arg_0_3->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_3 = std::string(*string_arg_0_3);

    auto field_arg_0_4 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("voteFirstRound").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_4(field_arg_0_4->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_4 = std::string(*string_arg_0_4);

    auto field_arg_0_5 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("voteLastRound").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_5(field_arg_0_5->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_5 = std::string(*string_arg_0_5);
    AlgorandParticipationInfo arg_0(arg_0_1, arg_0_2, arg_0_3, arg_0_4, arg_0_5);


    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::AlgorandTransaction>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSAlgorandTransaction::setParticipationInfo : implementation of AlgorandTransaction is not valid");
    }
    cpp_impl->setParticipationInfo(arg_0);
}
NAN_METHOD(NJSAlgorandTransaction::getParticipationInfo) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSAlgorandTransaction::getParticipationInfo needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::AlgorandTransaction>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSAlgorandTransaction::getParticipationInfo : implementation of AlgorandTransaction is not valid");
    }

    auto result = cpp_impl->getParticipationInfo();

    //Wrap result in node object
    auto arg_0 = Nan::New<Object>();
    auto arg_0_1 = Nan::New<String>(result.rootPublicKey).ToLocalChecked();
    Nan::DefineOwnProperty(arg_0, Nan::New<String>("rootPublicKey").ToLocalChecked(), arg_0_1);
    auto arg_0_2 = Nan::New<String>(result.vrfPublicKey).ToLocalChecked();
    Nan::DefineOwnProperty(arg_0, Nan::New<String>("vrfPublicKey").ToLocalChecked(), arg_0_2);
    auto arg_0_3 = Nan::New<String>(result.voteKeyDilution).ToLocalChecked();
    Nan::DefineOwnProperty(arg_0, Nan::New<String>("voteKeyDilution").ToLocalChecked(), arg_0_3);
    auto arg_0_4 = Nan::New<String>(result.voteFirstRound).ToLocalChecked();
    Nan::DefineOwnProperty(arg_0, Nan::New<String>("voteFirstRound").ToLocalChecked(), arg_0_4);
    auto arg_0_5 = Nan::New<String>(result.voteLastRound).ToLocalChecked();
    Nan::DefineOwnProperty(arg_0, Nan::New<String>("voteLastRound").ToLocalChecked(), arg_0_5);


    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSAlgorandTransaction::setAssetConfigurationInfo) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSAlgorandTransaction::setAssetConfigurationInfo needs 1 arguments");
    }

    //Check if parameters have correct types

    auto field_arg_0_1 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("assetId").ToLocalChecked()).ToLocalChecked();
    auto arg_0_1 = std::experimental::optional<std::string>();
    if(!field_arg_0_1->IsNull() && !field_arg_0_1->IsUndefined())
    {
        Nan::Utf8String string_opt_arg_0_1(field_arg_0_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_0_1 = std::string(*string_opt_arg_0_1);
        arg_0_1.emplace(opt_arg_0_1);
    }


    auto field_arg_0_2 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("assetParams").ToLocalChecked()).ToLocalChecked();
    auto arg_0_2 = std::experimental::optional<AlgorandAssetParams>();
    if(!field_arg_0_2->IsNull() && !field_arg_0_2->IsUndefined())
    {

        auto field_opt_arg_0_2_1 = Nan::Get(field_arg_0_2->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("assetId").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_0_2_1 = std::experimental::optional<std::string>();
        if(!field_opt_arg_0_2_1->IsNull() && !field_opt_arg_0_2_1->IsUndefined())
        {
            Nan::Utf8String string_opt_opt_arg_0_2_1(field_opt_arg_0_2_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
            auto opt_opt_arg_0_2_1 = std::string(*string_opt_opt_arg_0_2_1);
            opt_arg_0_2_1.emplace(opt_opt_arg_0_2_1);
        }


        auto field_opt_arg_0_2_2 = Nan::Get(field_arg_0_2->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("assetName").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_0_2_2 = std::experimental::optional<std::string>();
        if(!field_opt_arg_0_2_2->IsNull() && !field_opt_arg_0_2_2->IsUndefined())
        {
            Nan::Utf8String string_opt_opt_arg_0_2_2(field_opt_arg_0_2_2->ToString(Nan::GetCurrentContext()).ToLocalChecked());
            auto opt_opt_arg_0_2_2 = std::string(*string_opt_opt_arg_0_2_2);
            opt_arg_0_2_2.emplace(opt_opt_arg_0_2_2);
        }


        auto field_opt_arg_0_2_3 = Nan::Get(field_arg_0_2->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("unitName").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_0_2_3 = std::experimental::optional<std::string>();
        if(!field_opt_arg_0_2_3->IsNull() && !field_opt_arg_0_2_3->IsUndefined())
        {
            Nan::Utf8String string_opt_opt_arg_0_2_3(field_opt_arg_0_2_3->ToString(Nan::GetCurrentContext()).ToLocalChecked());
            auto opt_opt_arg_0_2_3 = std::string(*string_opt_opt_arg_0_2_3);
            opt_arg_0_2_3.emplace(opt_opt_arg_0_2_3);
        }


        auto field_opt_arg_0_2_4 = Nan::Get(field_arg_0_2->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("url").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_0_2_4 = std::experimental::optional<std::string>();
        if(!field_opt_arg_0_2_4->IsNull() && !field_opt_arg_0_2_4->IsUndefined())
        {
            Nan::Utf8String string_opt_opt_arg_0_2_4(field_opt_arg_0_2_4->ToString(Nan::GetCurrentContext()).ToLocalChecked());
            auto opt_opt_arg_0_2_4 = std::string(*string_opt_opt_arg_0_2_4);
            opt_arg_0_2_4.emplace(opt_opt_arg_0_2_4);
        }


        auto field_opt_arg_0_2_5 = Nan::Get(field_arg_0_2->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("defaultFrozen").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_0_2_5 = Nan::To<bool>(field_opt_arg_0_2_5).FromJust();

        auto field_opt_arg_0_2_6 = Nan::Get(field_arg_0_2->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("total").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_0_2_6 = std::experimental::optional<std::string>();
        if(!field_opt_arg_0_2_6->IsNull() && !field_opt_arg_0_2_6->IsUndefined())
        {
            Nan::Utf8String string_opt_opt_arg_0_2_6(field_opt_arg_0_2_6->ToString(Nan::GetCurrentContext()).ToLocalChecked());
            auto opt_opt_arg_0_2_6 = std::string(*string_opt_opt_arg_0_2_6);
            opt_arg_0_2_6.emplace(opt_opt_arg_0_2_6);
        }


        auto field_opt_arg_0_2_7 = Nan::Get(field_arg_0_2->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("decimals").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_0_2_7 = std::experimental::optional<std::string>();
        if(!field_opt_arg_0_2_7->IsNull() && !field_opt_arg_0_2_7->IsUndefined())
        {
            Nan::Utf8String string_opt_opt_arg_0_2_7(field_opt_arg_0_2_7->ToString(Nan::GetCurrentContext()).ToLocalChecked());
            auto opt_opt_arg_0_2_7 = std::string(*string_opt_opt_arg_0_2_7);
            opt_arg_0_2_7.emplace(opt_opt_arg_0_2_7);
        }


        auto field_opt_arg_0_2_8 = Nan::Get(field_arg_0_2->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("creatorAddress").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_0_2_8 = std::experimental::optional<std::string>();
        if(!field_opt_arg_0_2_8->IsNull() && !field_opt_arg_0_2_8->IsUndefined())
        {
            Nan::Utf8String string_opt_opt_arg_0_2_8(field_opt_arg_0_2_8->ToString(Nan::GetCurrentContext()).ToLocalChecked());
            auto opt_opt_arg_0_2_8 = std::string(*string_opt_opt_arg_0_2_8);
            opt_arg_0_2_8.emplace(opt_opt_arg_0_2_8);
        }


        auto field_opt_arg_0_2_9 = Nan::Get(field_arg_0_2->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("managerAddress").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_0_2_9 = std::experimental::optional<std::string>();
        if(!field_opt_arg_0_2_9->IsNull() && !field_opt_arg_0_2_9->IsUndefined())
        {
            Nan::Utf8String string_opt_opt_arg_0_2_9(field_opt_arg_0_2_9->ToString(Nan::GetCurrentContext()).ToLocalChecked());
            auto opt_opt_arg_0_2_9 = std::string(*string_opt_opt_arg_0_2_9);
            opt_arg_0_2_9.emplace(opt_opt_arg_0_2_9);
        }


        auto field_opt_arg_0_2_10 = Nan::Get(field_arg_0_2->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("freezeAddress").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_0_2_10 = std::experimental::optional<std::string>();
        if(!field_opt_arg_0_2_10->IsNull() && !field_opt_arg_0_2_10->IsUndefined())
        {
            Nan::Utf8String string_opt_opt_arg_0_2_10(field_opt_arg_0_2_10->ToString(Nan::GetCurrentContext()).ToLocalChecked());
            auto opt_opt_arg_0_2_10 = std::string(*string_opt_opt_arg_0_2_10);
            opt_arg_0_2_10.emplace(opt_opt_arg_0_2_10);
        }


        auto field_opt_arg_0_2_11 = Nan::Get(field_arg_0_2->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("clawbackAddress").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_0_2_11 = std::experimental::optional<std::string>();
        if(!field_opt_arg_0_2_11->IsNull() && !field_opt_arg_0_2_11->IsUndefined())
        {
            Nan::Utf8String string_opt_opt_arg_0_2_11(field_opt_arg_0_2_11->ToString(Nan::GetCurrentContext()).ToLocalChecked());
            auto opt_opt_arg_0_2_11 = std::string(*string_opt_opt_arg_0_2_11);
            opt_arg_0_2_11.emplace(opt_opt_arg_0_2_11);
        }


        auto field_opt_arg_0_2_12 = Nan::Get(field_arg_0_2->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("reserveAddress").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_0_2_12 = std::experimental::optional<std::string>();
        if(!field_opt_arg_0_2_12->IsNull() && !field_opt_arg_0_2_12->IsUndefined())
        {
            Nan::Utf8String string_opt_opt_arg_0_2_12(field_opt_arg_0_2_12->ToString(Nan::GetCurrentContext()).ToLocalChecked());
            auto opt_opt_arg_0_2_12 = std::string(*string_opt_opt_arg_0_2_12);
            opt_arg_0_2_12.emplace(opt_opt_arg_0_2_12);
        }


        auto field_opt_arg_0_2_13 = Nan::Get(field_arg_0_2->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("metadataHash").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_0_2_13 = std::experimental::optional<std::string>();
        if(!field_opt_arg_0_2_13->IsNull() && !field_opt_arg_0_2_13->IsUndefined())
        {
            Nan::Utf8String string_opt_opt_arg_0_2_13(field_opt_arg_0_2_13->ToString(Nan::GetCurrentContext()).ToLocalChecked());
            auto opt_opt_arg_0_2_13 = std::string(*string_opt_opt_arg_0_2_13);
            opt_arg_0_2_13.emplace(opt_opt_arg_0_2_13);
        }

        AlgorandAssetParams opt_arg_0_2(opt_arg_0_2_1, opt_arg_0_2_2, opt_arg_0_2_3, opt_arg_0_2_4, opt_arg_0_2_5, opt_arg_0_2_6, opt_arg_0_2_7, opt_arg_0_2_8, opt_arg_0_2_9, opt_arg_0_2_10, opt_arg_0_2_11, opt_arg_0_2_12, opt_arg_0_2_13);

        arg_0_2.emplace(opt_arg_0_2);
    }

    AlgorandAssetConfigurationInfo arg_0(arg_0_1, arg_0_2);


    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::AlgorandTransaction>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSAlgorandTransaction::setAssetConfigurationInfo : implementation of AlgorandTransaction is not valid");
    }
    cpp_impl->setAssetConfigurationInfo(arg_0);
}
NAN_METHOD(NJSAlgorandTransaction::getAssetConfigurationInfo) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSAlgorandTransaction::getAssetConfigurationInfo needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::AlgorandTransaction>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSAlgorandTransaction::getAssetConfigurationInfo : implementation of AlgorandTransaction is not valid");
    }

    auto result = cpp_impl->getAssetConfigurationInfo();

    //Wrap result in node object
    auto arg_0 = Nan::New<Object>();
    Local<Value> arg_0_1;
    if(result.assetId)
    {
        auto arg_0_1_optional = (result.assetId).value();
        auto arg_0_1_tmp = Nan::New<String>(arg_0_1_optional).ToLocalChecked();
        arg_0_1 = arg_0_1_tmp;
    }

    Nan::DefineOwnProperty(arg_0, Nan::New<String>("assetId").ToLocalChecked(), arg_0_1);
    Local<Value> arg_0_2;
    if(result.assetParams)
    {
        auto arg_0_2_optional = (result.assetParams).value();
        auto arg_0_2_tmp = Nan::New<Object>();
        Local<Value> arg_0_2_tmp_1;
        if(arg_0_2_optional.assetId)
        {
            auto arg_0_2_tmp_1_optional = (arg_0_2_optional.assetId).value();
            auto arg_0_2_tmp_1_tmp = Nan::New<String>(arg_0_2_tmp_1_optional).ToLocalChecked();
            arg_0_2_tmp_1 = arg_0_2_tmp_1_tmp;
        }

        Nan::DefineOwnProperty(arg_0_2_tmp, Nan::New<String>("assetId").ToLocalChecked(), arg_0_2_tmp_1);
        Local<Value> arg_0_2_tmp_2;
        if(arg_0_2_optional.assetName)
        {
            auto arg_0_2_tmp_2_optional = (arg_0_2_optional.assetName).value();
            auto arg_0_2_tmp_2_tmp = Nan::New<String>(arg_0_2_tmp_2_optional).ToLocalChecked();
            arg_0_2_tmp_2 = arg_0_2_tmp_2_tmp;
        }

        Nan::DefineOwnProperty(arg_0_2_tmp, Nan::New<String>("assetName").ToLocalChecked(), arg_0_2_tmp_2);
        Local<Value> arg_0_2_tmp_3;
        if(arg_0_2_optional.unitName)
        {
            auto arg_0_2_tmp_3_optional = (arg_0_2_optional.unitName).value();
            auto arg_0_2_tmp_3_tmp = Nan::New<String>(arg_0_2_tmp_3_optional).ToLocalChecked();
            arg_0_2_tmp_3 = arg_0_2_tmp_3_tmp;
        }

        Nan::DefineOwnProperty(arg_0_2_tmp, Nan::New<String>("unitName").ToLocalChecked(), arg_0_2_tmp_3);
        Local<Value> arg_0_2_tmp_4;
        if(arg_0_2_optional.url)
        {
            auto arg_0_2_tmp_4_optional = (arg_0_2_optional.url).value();
            auto arg_0_2_tmp_4_tmp = Nan::New<String>(arg_0_2_tmp_4_optional).ToLocalChecked();
            arg_0_2_tmp_4 = arg_0_2_tmp_4_tmp;
        }

        Nan::DefineOwnProperty(arg_0_2_tmp, Nan::New<String>("url").ToLocalChecked(), arg_0_2_tmp_4);
        auto arg_0_2_tmp_5 = Nan::New<Boolean>(arg_0_2_optional.defaultFrozen);
        Nan::DefineOwnProperty(arg_0_2_tmp, Nan::New<String>("defaultFrozen").ToLocalChecked(), arg_0_2_tmp_5);
        Local<Value> arg_0_2_tmp_6;
        if(arg_0_2_optional.total)
        {
            auto arg_0_2_tmp_6_optional = (arg_0_2_optional.total).value();
            auto arg_0_2_tmp_6_tmp = Nan::New<String>(arg_0_2_tmp_6_optional).ToLocalChecked();
            arg_0_2_tmp_6 = arg_0_2_tmp_6_tmp;
        }

        Nan::DefineOwnProperty(arg_0_2_tmp, Nan::New<String>("total").ToLocalChecked(), arg_0_2_tmp_6);
        Local<Value> arg_0_2_tmp_7;
        if(arg_0_2_optional.decimals)
        {
            auto arg_0_2_tmp_7_optional = (arg_0_2_optional.decimals).value();
            auto arg_0_2_tmp_7_tmp = Nan::New<String>(arg_0_2_tmp_7_optional).ToLocalChecked();
            arg_0_2_tmp_7 = arg_0_2_tmp_7_tmp;
        }

        Nan::DefineOwnProperty(arg_0_2_tmp, Nan::New<String>("decimals").ToLocalChecked(), arg_0_2_tmp_7);
        Local<Value> arg_0_2_tmp_8;
        if(arg_0_2_optional.creatorAddress)
        {
            auto arg_0_2_tmp_8_optional = (arg_0_2_optional.creatorAddress).value();
            auto arg_0_2_tmp_8_tmp = Nan::New<String>(arg_0_2_tmp_8_optional).ToLocalChecked();
            arg_0_2_tmp_8 = arg_0_2_tmp_8_tmp;
        }

        Nan::DefineOwnProperty(arg_0_2_tmp, Nan::New<String>("creatorAddress").ToLocalChecked(), arg_0_2_tmp_8);
        Local<Value> arg_0_2_tmp_9;
        if(arg_0_2_optional.managerAddress)
        {
            auto arg_0_2_tmp_9_optional = (arg_0_2_optional.managerAddress).value();
            auto arg_0_2_tmp_9_tmp = Nan::New<String>(arg_0_2_tmp_9_optional).ToLocalChecked();
            arg_0_2_tmp_9 = arg_0_2_tmp_9_tmp;
        }

        Nan::DefineOwnProperty(arg_0_2_tmp, Nan::New<String>("managerAddress").ToLocalChecked(), arg_0_2_tmp_9);
        Local<Value> arg_0_2_tmp_10;
        if(arg_0_2_optional.freezeAddress)
        {
            auto arg_0_2_tmp_10_optional = (arg_0_2_optional.freezeAddress).value();
            auto arg_0_2_tmp_10_tmp = Nan::New<String>(arg_0_2_tmp_10_optional).ToLocalChecked();
            arg_0_2_tmp_10 = arg_0_2_tmp_10_tmp;
        }

        Nan::DefineOwnProperty(arg_0_2_tmp, Nan::New<String>("freezeAddress").ToLocalChecked(), arg_0_2_tmp_10);
        Local<Value> arg_0_2_tmp_11;
        if(arg_0_2_optional.clawbackAddress)
        {
            auto arg_0_2_tmp_11_optional = (arg_0_2_optional.clawbackAddress).value();
            auto arg_0_2_tmp_11_tmp = Nan::New<String>(arg_0_2_tmp_11_optional).ToLocalChecked();
            arg_0_2_tmp_11 = arg_0_2_tmp_11_tmp;
        }

        Nan::DefineOwnProperty(arg_0_2_tmp, Nan::New<String>("clawbackAddress").ToLocalChecked(), arg_0_2_tmp_11);
        Local<Value> arg_0_2_tmp_12;
        if(arg_0_2_optional.reserveAddress)
        {
            auto arg_0_2_tmp_12_optional = (arg_0_2_optional.reserveAddress).value();
            auto arg_0_2_tmp_12_tmp = Nan::New<String>(arg_0_2_tmp_12_optional).ToLocalChecked();
            arg_0_2_tmp_12 = arg_0_2_tmp_12_tmp;
        }

        Nan::DefineOwnProperty(arg_0_2_tmp, Nan::New<String>("reserveAddress").ToLocalChecked(), arg_0_2_tmp_12);
        Local<Value> arg_0_2_tmp_13;
        if(arg_0_2_optional.metadataHash)
        {
            auto arg_0_2_tmp_13_optional = (arg_0_2_optional.metadataHash).value();
            auto arg_0_2_tmp_13_tmp = Nan::New<String>(arg_0_2_tmp_13_optional).ToLocalChecked();
            arg_0_2_tmp_13 = arg_0_2_tmp_13_tmp;
        }

        Nan::DefineOwnProperty(arg_0_2_tmp, Nan::New<String>("metadataHash").ToLocalChecked(), arg_0_2_tmp_13);

        arg_0_2 = arg_0_2_tmp;
    }

    Nan::DefineOwnProperty(arg_0, Nan::New<String>("assetParams").ToLocalChecked(), arg_0_2);


    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSAlgorandTransaction::setAssetTransferInfo) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSAlgorandTransaction::setAssetTransferInfo needs 1 arguments");
    }

    //Check if parameters have correct types

    auto field_arg_0_1 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("assetId").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_1(field_arg_0_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_1 = std::string(*string_arg_0_1);

    auto field_arg_0_2 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("amount").ToLocalChecked()).ToLocalChecked();
    auto arg_0_2 = std::experimental::optional<std::string>();
    if(!field_arg_0_2->IsNull() && !field_arg_0_2->IsUndefined())
    {
        Nan::Utf8String string_opt_arg_0_2(field_arg_0_2->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_0_2 = std::string(*string_opt_arg_0_2);
        arg_0_2.emplace(opt_arg_0_2);
    }


    auto field_arg_0_3 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("recipientAddress").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_3(field_arg_0_3->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_3 = std::string(*string_arg_0_3);

    auto field_arg_0_4 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("closeAddress").ToLocalChecked()).ToLocalChecked();
    auto arg_0_4 = std::experimental::optional<std::string>();
    if(!field_arg_0_4->IsNull() && !field_arg_0_4->IsUndefined())
    {
        Nan::Utf8String string_opt_arg_0_4(field_arg_0_4->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_0_4 = std::string(*string_opt_arg_0_4);
        arg_0_4.emplace(opt_arg_0_4);
    }


    auto field_arg_0_5 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("clawedBackAddress").ToLocalChecked()).ToLocalChecked();
    auto arg_0_5 = std::experimental::optional<std::string>();
    if(!field_arg_0_5->IsNull() && !field_arg_0_5->IsUndefined())
    {
        Nan::Utf8String string_opt_arg_0_5(field_arg_0_5->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_0_5 = std::string(*string_opt_arg_0_5);
        arg_0_5.emplace(opt_arg_0_5);
    }


    auto field_arg_0_6 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("closeAmount").ToLocalChecked()).ToLocalChecked();
    auto arg_0_6 = std::experimental::optional<std::string>();
    if(!field_arg_0_6->IsNull() && !field_arg_0_6->IsUndefined())
    {
        Nan::Utf8String string_opt_arg_0_6(field_arg_0_6->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_0_6 = std::string(*string_opt_arg_0_6);
        arg_0_6.emplace(opt_arg_0_6);
    }

    AlgorandAssetTransferInfo arg_0(arg_0_1, arg_0_2, arg_0_3, arg_0_4, arg_0_5, arg_0_6);


    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::AlgorandTransaction>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSAlgorandTransaction::setAssetTransferInfo : implementation of AlgorandTransaction is not valid");
    }
    cpp_impl->setAssetTransferInfo(arg_0);
}
NAN_METHOD(NJSAlgorandTransaction::getAssetTransferInfo) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSAlgorandTransaction::getAssetTransferInfo needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::AlgorandTransaction>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSAlgorandTransaction::getAssetTransferInfo : implementation of AlgorandTransaction is not valid");
    }

    auto result = cpp_impl->getAssetTransferInfo();

    //Wrap result in node object
    auto arg_0 = Nan::New<Object>();
    auto arg_0_1 = Nan::New<String>(result.assetId).ToLocalChecked();
    Nan::DefineOwnProperty(arg_0, Nan::New<String>("assetId").ToLocalChecked(), arg_0_1);
    Local<Value> arg_0_2;
    if(result.amount)
    {
        auto arg_0_2_optional = (result.amount).value();
        auto arg_0_2_tmp = Nan::New<String>(arg_0_2_optional).ToLocalChecked();
        arg_0_2 = arg_0_2_tmp;
    }

    Nan::DefineOwnProperty(arg_0, Nan::New<String>("amount").ToLocalChecked(), arg_0_2);
    auto arg_0_3 = Nan::New<String>(result.recipientAddress).ToLocalChecked();
    Nan::DefineOwnProperty(arg_0, Nan::New<String>("recipientAddress").ToLocalChecked(), arg_0_3);
    Local<Value> arg_0_4;
    if(result.closeAddress)
    {
        auto arg_0_4_optional = (result.closeAddress).value();
        auto arg_0_4_tmp = Nan::New<String>(arg_0_4_optional).ToLocalChecked();
        arg_0_4 = arg_0_4_tmp;
    }

    Nan::DefineOwnProperty(arg_0, Nan::New<String>("closeAddress").ToLocalChecked(), arg_0_4);
    Local<Value> arg_0_5;
    if(result.clawedBackAddress)
    {
        auto arg_0_5_optional = (result.clawedBackAddress).value();
        auto arg_0_5_tmp = Nan::New<String>(arg_0_5_optional).ToLocalChecked();
        arg_0_5 = arg_0_5_tmp;
    }

    Nan::DefineOwnProperty(arg_0, Nan::New<String>("clawedBackAddress").ToLocalChecked(), arg_0_5);
    Local<Value> arg_0_6;
    if(result.closeAmount)
    {
        auto arg_0_6_optional = (result.closeAmount).value();
        auto arg_0_6_tmp = Nan::New<String>(arg_0_6_optional).ToLocalChecked();
        arg_0_6 = arg_0_6_tmp;
    }

    Nan::DefineOwnProperty(arg_0, Nan::New<String>("closeAmount").ToLocalChecked(), arg_0_6);


    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSAlgorandTransaction::setAssetFreezeInfo) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSAlgorandTransaction::setAssetFreezeInfo needs 1 arguments");
    }

    //Check if parameters have correct types

    auto field_arg_0_1 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("assetId").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_1(field_arg_0_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_1 = std::string(*string_arg_0_1);

    auto field_arg_0_2 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("frozenAddress").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_2(field_arg_0_2->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_2 = std::string(*string_arg_0_2);

    auto field_arg_0_3 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("frozen").ToLocalChecked()).ToLocalChecked();
    auto arg_0_3 = Nan::To<bool>(field_arg_0_3).FromJust();
    AlgorandAssetFreezeInfo arg_0(arg_0_1, arg_0_2, arg_0_3);


    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::AlgorandTransaction>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSAlgorandTransaction::setAssetFreezeInfo : implementation of AlgorandTransaction is not valid");
    }
    cpp_impl->setAssetFreezeInfo(arg_0);
}
NAN_METHOD(NJSAlgorandTransaction::getAssetFreezeInfo) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSAlgorandTransaction::getAssetFreezeInfo needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::AlgorandTransaction>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSAlgorandTransaction::getAssetFreezeInfo : implementation of AlgorandTransaction is not valid");
    }

    auto result = cpp_impl->getAssetFreezeInfo();

    //Wrap result in node object
    auto arg_0 = Nan::New<Object>();
    auto arg_0_1 = Nan::New<String>(result.assetId).ToLocalChecked();
    Nan::DefineOwnProperty(arg_0, Nan::New<String>("assetId").ToLocalChecked(), arg_0_1);
    auto arg_0_2 = Nan::New<String>(result.frozenAddress).ToLocalChecked();
    Nan::DefineOwnProperty(arg_0, Nan::New<String>("frozenAddress").ToLocalChecked(), arg_0_2);
    auto arg_0_3 = Nan::New<Boolean>(result.frozen);
    Nan::DefineOwnProperty(arg_0, Nan::New<String>("frozen").ToLocalChecked(), arg_0_3);


    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSAlgorandTransaction::serialize) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSAlgorandTransaction::serialize needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::AlgorandTransaction>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSAlgorandTransaction::serialize : implementation of AlgorandTransaction is not valid");
    }

    auto result = cpp_impl->serialize();

    //Wrap result in node object
    auto arg_0 = Nan::New<String>("0x" + djinni::js::hex::toString(result)).ToLocalChecked();


    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSAlgorandTransaction::setSignature) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSAlgorandTransaction::setSignature needs 1 arguments");
    }

    //Check if parameters have correct types
    if(!info[0]->IsString())
    {
        Nan::ThrowError("info[0] should be a hexadecimal string.");
    }
    std::vector<uint8_t> arg_0;
    Nan::Utf8String str_arg_0(info[0]);
    std::string string_arg_0(*str_arg_0, str_arg_0.length());
    if (string_arg_0.rfind("0x", 0) == 0)
    {
        arg_0 = djinni::js::hex::toByteArray(string_arg_0.substr(2));
    }
    else
    {
        arg_0 = std::vector<uint8_t>(string_arg_0.cbegin(), string_arg_0.cend());
    }


    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::AlgorandTransaction>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSAlgorandTransaction::setSignature : implementation of AlgorandTransaction is not valid");
    }
    cpp_impl->setSignature(arg_0);
}

NAN_METHOD(NJSAlgorandTransaction::New) {
    //Only new allowed
    if(!info.IsConstructCall())
    {
        return Nan::ThrowError("NJSAlgorandTransaction function can only be called as constructor (use New)");
    }
    info.GetReturnValue().Set(info.This());
}


Nan::Persistent<ObjectTemplate> NJSAlgorandTransaction::AlgorandTransaction_prototype;

Local<Object> NJSAlgorandTransaction::wrap(const std::shared_ptr<ledger::core::api::AlgorandTransaction> &object) {
    Nan::EscapableHandleScope scope;
    Local<ObjectTemplate> local_prototype = Nan::New(AlgorandTransaction_prototype);

    Local<Object> obj;
    if(!local_prototype.IsEmpty())
    {
        obj = local_prototype->NewInstance(Nan::GetCurrentContext()).ToLocalChecked();
        djinni::js::ObjectWrapper<ledger::core::api::AlgorandTransaction>::Wrap(object, obj);
    }
    else
    {
        Nan::ThrowError("NJSAlgorandTransaction::wrap: object template not valid");
    }
    return scope.Escape(obj);
}

NAN_METHOD(NJSAlgorandTransaction::isNull) {
    auto cpp_implementation = djinni::js::ObjectWrapper<ledger::core::api::AlgorandTransaction>::Unwrap(info.This());
    auto isNull = !cpp_implementation ? true : false;
    return info.GetReturnValue().Set(Nan::New<Boolean>(isNull));
}

void NJSAlgorandTransaction::Initialize(Local<Object> target) {
    Nan::HandleScope scope;

    Local<FunctionTemplate> func_template = Nan::New<FunctionTemplate>(NJSAlgorandTransaction::New);
    Local<ObjectTemplate> objectTemplate = func_template->InstanceTemplate();
    objectTemplate->SetInternalFieldCount(1);

    func_template->SetClassName(Nan::New<String>("NJSAlgorandTransaction").ToLocalChecked());

    //SetPrototypeMethod all methods
    Nan::SetPrototypeMethod(func_template,"getId", getId);
    Nan::SetPrototypeMethod(func_template,"getType", getType);
    Nan::SetPrototypeMethod(func_template,"getSender", getSender);
    Nan::SetPrototypeMethod(func_template,"getFee", getFee);
    Nan::SetPrototypeMethod(func_template,"getNote", getNote);
    Nan::SetPrototypeMethod(func_template,"getRound", getRound);
    Nan::SetPrototypeMethod(func_template,"getSenderRewards", getSenderRewards);
    Nan::SetPrototypeMethod(func_template,"getReceiverRewards", getReceiverRewards);
    Nan::SetPrototypeMethod(func_template,"getCloseRewards", getCloseRewards);
    Nan::SetPrototypeMethod(func_template,"getCorrelationId", getCorrelationId);
    Nan::SetPrototypeMethod(func_template,"setCorrelationId", setCorrelationId);
    Nan::SetPrototypeMethod(func_template,"setSender", setSender);
    Nan::SetPrototypeMethod(func_template,"setFee", setFee);
    Nan::SetPrototypeMethod(func_template,"setNote", setNote);
    Nan::SetPrototypeMethod(func_template,"setPaymentInfo", setPaymentInfo);
    Nan::SetPrototypeMethod(func_template,"getPaymentInfo", getPaymentInfo);
    Nan::SetPrototypeMethod(func_template,"setParticipationInfo", setParticipationInfo);
    Nan::SetPrototypeMethod(func_template,"getParticipationInfo", getParticipationInfo);
    Nan::SetPrototypeMethod(func_template,"setAssetConfigurationInfo", setAssetConfigurationInfo);
    Nan::SetPrototypeMethod(func_template,"getAssetConfigurationInfo", getAssetConfigurationInfo);
    Nan::SetPrototypeMethod(func_template,"setAssetTransferInfo", setAssetTransferInfo);
    Nan::SetPrototypeMethod(func_template,"getAssetTransferInfo", getAssetTransferInfo);
    Nan::SetPrototypeMethod(func_template,"setAssetFreezeInfo", setAssetFreezeInfo);
    Nan::SetPrototypeMethod(func_template,"getAssetFreezeInfo", getAssetFreezeInfo);
    Nan::SetPrototypeMethod(func_template,"serialize", serialize);
    Nan::SetPrototypeMethod(func_template,"setSignature", setSignature);
    Nan::SetPrototypeMethod(func_template,"isNull", isNull);
    //Set object prototype
    AlgorandTransaction_prototype.Reset(objectTemplate);

    //Add template to target
    Nan::Set(target, Nan::New<String>("NJSAlgorandTransaction").ToLocalChecked(), Nan::GetFunction(func_template).ToLocalChecked());
}
