// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from http_client.djinni

#ifndef DJINNI_GENERATED_NJSHTTPREQUEST_HPP
#define DJINNI_GENERATED_NJSHTTPREQUEST_HPP


#include "../include/../utils/optional.hpp"
#include "../include/Error.hpp"
#include "../include/HttpMethod.hpp"
#include "NJSHttpUrlConnection.hpp"
#include <cstdint>
#include <memory>
#include <string>
#include <unordered_map>
#include <vector>

#include <nan.h>
#include <node.h>
#include "../include/HttpRequest.hpp"

using namespace v8;
using namespace node;
using namespace std;
using namespace ledger::core::api;

class NJSHttpRequest final {
public:

    static void Initialize(Local<Object> target);
    NJSHttpRequest() = delete;

    static Local<Object> wrap(const std::shared_ptr<ledger::core::api::HttpRequest> &object);
    static Nan::Persistent<ObjectTemplate> HttpRequest_prototype;

private:
    /**
     * Get method of request.
     * @return HttpMethod enum entry
     */
    static NAN_METHOD(getMethod);

    /**
     * Get headers set in the request.
     * @return Map with key and value of type string
     */
    static NAN_METHOD(getHeaders);

    /**
     * Get body of request.
     * @return binary
     */
    static NAN_METHOD(getBody);

    /**
     * Get Url of request.
     * @return string
     */
    static NAN_METHOD(getUrl);

    /**
     * Method called when request is completed.
     * @param response, Optional HttpUrlConnection object, response of request if succeed
     * @param error, optional Error structure, error returned in case of request failure
     */
    static NAN_METHOD(complete);

    static NAN_METHOD(New);

    static NAN_METHOD(isNull);
};
#endif //DJINNI_GENERATED_NJSHTTPREQUEST_HPP
