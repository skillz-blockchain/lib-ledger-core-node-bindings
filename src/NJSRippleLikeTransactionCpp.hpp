// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from ripple_like_wallet.djinni

#ifndef DJINNI_GENERATED_NJSRIPPLELIKETRANSACTION_HPP
#define DJINNI_GENERATED_NJSRIPPLELIKETRANSACTION_HPP


#include "../include/../utils/optional.hpp"
#include "../include/RippleLikeMemo.hpp"
#include "NJSAmountCpp.hpp"
#include "NJSBigIntCpp.hpp"
#include "NJSRippleLikeAddressCpp.hpp"
#include <chrono>
#include <cstdint>
#include <memory>
#include <string>
#include <vector>

#include <nan.h>
#include <node.h>
#include "../include/RippleLikeTransaction.hpp"

using namespace v8;
using namespace node;
using namespace std;
using namespace ledger::core::api;

class NJSRippleLikeTransaction final {
public:

    static void Initialize(Local<Object> target);
    NJSRippleLikeTransaction() = delete;

    static Local<Object> wrap(const std::shared_ptr<ledger::core::api::RippleLikeTransaction> &object);
    static Nan::Persistent<ObjectTemplate> RippleLikeTransaction_prototype;

private:
    /** Get the hash of the transaction. */
    static NAN_METHOD(getHash);

    /** Get Fees (in drop) */
    static NAN_METHOD(getFees);

    /** Get destination XRP address */
    static NAN_METHOD(getReceiver);

    /** Get XRP sender address */
    static NAN_METHOD(getSender);

    /** Get amount of XRP to send */
    static NAN_METHOD(getValue);

    /** Serialize the transaction to its raw format. */
    static NAN_METHOD(serialize);

    /** Set signature of transaction, when a signature is set serialize method gives back serialized Tx */
    static NAN_METHOD(setSignature);

    static NAN_METHOD(setDERSignature);

    /**
     * Get the time when the transaction was issued or the time of the block including
     * this transaction
     */
    static NAN_METHOD(getDate);

    /**
     * Get block to which transaction belongs (was mined in)
     *getBlock(): optional<RippleLikeBlock>;
     * Get sequence of an account when tx was built (number of sent transactions from an account)
     */
    static NAN_METHOD(getSequence);

    /** Get Ledger's sequence in which the tx was included */
    static NAN_METHOD(getLedgerSequence);

    /** Get Signing public Key */
    static NAN_METHOD(getSigningPubKey);

    /** Get all memos associated with the transaction. */
    static NAN_METHOD(getMemos);

    /** Add a memo to a transaction. */
    static NAN_METHOD(addMemo);

    /** An arbitrary unsigned 32-bit integer that identifies a reason for payment or a non-Ripple account */
    static NAN_METHOD(getDestinationTag);

    /** Status of the transaction. */
    static NAN_METHOD(getStatus);

    /** Get the correlation id */
    static NAN_METHOD(getCorrelationId);

    /**
     * Set the correlation id which can be used to debug transaction errors
     * through the full ledger stack
     * @return the OLD Correlation ID, if it was set (empty string if it was unset)
     */
    static NAN_METHOD(setCorrelationId);

    static NAN_METHOD(New);

    static NAN_METHOD(isNull);
};
#endif //DJINNI_GENERATED_NJSRIPPLELIKETRANSACTION_HPP
